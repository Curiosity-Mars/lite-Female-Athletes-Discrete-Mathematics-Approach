Figure 2a and 2b (Paired and Independent t-Tests)
python
コピーする
編集する
from scipy.stats import ttest_rel, ttest_ind
import numpy as np

# Replace with real dataset values
pre_treatment = np.array([...])   # e.g. PadTest before VEL+UEL
post_treatment = np.array([...])  # e.g. PadTest after VEL+UEL

pre_control = np.array([...])     # e.g. PadTest before PFMT
post_control = np.array([...])    # e.g. PadTest after PFMT

# Paired t-tests: within each group (pre vs post)
t_stat1, p_val1 = ttest_rel(pre_treatment, post_treatment)
t_stat2, p_val2 = ttest_rel(pre_control, post_control)

# Independent t-test: between groups (after treatment)
t_stat3, p_val3 = ttest_ind(post_treatment, post_control)

# Output results
print(f"Treatment Group (pre vs post): p = {p_val1:.4e}")
print(f"Control Group (pre vs post): p = {p_val2:.4e}")
print(f"Between Groups (post-treatment): p = {p_val3:.4e}")
📘 Figure 2c (Sensitivity Analysis Distribution)
python
コピーする
編集する
import numpy as np
import matplotlib.pyplot as plt

# Generate simulated treatment effect estimates
np.random.seed(0)
treatment_effects = []

for _ in range(50):
    # Simulated ATE for different covariate sets
    effect = np.mean(np.random.normal(loc=11, scale=14.8, size=100))
    treatment_effects.append(effect)

# Plot distribution
plt.hist(treatment_effects, bins=10, alpha=0.75)
plt.axvline(np.mean(treatment_effects), color='red', linestyle='--', label='Mean Effect: 11.0')
plt.title('Figure 2c: Sensitivity Analysis Distribution')
plt.xlabel('Estimated Treatment Effect')
plt.ylabel('Frequency')
plt.legend()
plt.tight_layout()
plt.savefig('figure2c_sensitivity_analysis.png')
